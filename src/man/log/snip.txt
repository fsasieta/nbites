/*
            if (nbsf::flags[nbsf::STATS]) {
                
                struct __attribute__((__packed__)) {
                    uint64_t fio_upstart;
                    uint64_t sio_upstart;
                    
                    uint64_t cio_upstart;
                    uint64_t cnc_upstart;
                    
                    uint64_t main_upstart;
                    
                    nbsf::io_state_t fio_start[NUM_LOG_BUFFERS];
                    nbsf::io_state_t cio_start[NUM_LOG_BUFFERS];
                    nbsf::io_state_t total[NUM_LOG_BUFFERS];
                    
                    nbsf::buf_state_t state[NUM_LOG_BUFFERS];
                    
                    uint32_t ratio[NUM_LOG_BUFFERS];
                    uint32_t size[NUM_LOG_BUFFERS];
                    
                    uint32_t cores;
                    
                    uint8_t flags[nbsf::num_flags];
                } contig;
                
                // 40 + (3 * n * 40) + (n * 12) + (2 * n * 4) + 4 + (nbsf::num_flags)
                int packed_size = 40 + (3 * NUM_LOG_BUFFERS * 40) + (NUM_LOG_BUFFERS * 12) + (2 * NUM_LOG_BUFFERS * 4) + 4 + (nbsf::num_flags);
                NBLassert(sizeof(contig) == packed_size);
                LOGDEBUG(7, "stat struct size: %i\n", packed_size);
                
                const time_t CURRENT = time(NULL);
                
                //Copy volatile items as close to simultaneously as possible to minimize drift
                contig.fio_upstart = nbsf::fio_upstart;
                contig.sio_upstart = nbsf::sio_upstart;
                contig.cio_upstart = nbsf::cio_upstart;
                contig.cnc_upstart = nbsf::cnc_upstart;
                contig.main_upstart = nbsf::main_upstart;
                
                memcpy(contig.fio_start, nbsf::fio_start, sizeof(nbsf::io_state_t) * NUM_LOG_BUFFERS);
                memcpy(contig.cio_start, nbsf::cio_start, sizeof(nbsf::io_state_t) * NUM_LOG_BUFFERS);
                memcpy(contig.total, nbsf::total, sizeof(nbsf::io_state_t) * NUM_LOG_BUFFERS);
                
                for (int i = 0; i < NUM_LOG_BUFFERS; ++i) {
                    //memcpy(contig.state + i, log_main->buffers[i], sizeof(nbsf::buf_state_t));
                    log_buffer_t * buf = log_main->buffers[i];
                    
                    contig.state[i].filenr = buf->fileio_nextr;
                    contig.state[i].servnr = buf->servio_nextr;
                    contig.state[i].nextw  = buf->next_write;
                    
                    contig.ratio[i] = LOG_RATIO[i];
                    contig.size[i] = LOG_BUFFER_SIZES[i];
                }
                
                memcpy( contig.flags,  (uint8_t *) nbsf::flags, nbsf::num_flags);
                
                //Set non-volatile items, convert everything to network order.
                contig.cores = htonl(nbsf::NUM_CORES);
                
                if (contig.flags[nbsf::fileio]) {
                    neterize(contig.fio_start, contig.fio_start, contig.total);
                    contig.fio_upstart = net_time(contig.fio_upstart, CURRENT);
                } else {
                    bzero(contig.fio_start, sizeof(nbsf::io_state_t) * NUM_LOG_BUFFERS);
                    contig.fio_upstart = 0;
                }
                
                if (contig.flags[nbsf::serv_connected]) {
                    neterize(contig.cio_start, contig.cio_start, contig.total);
                    contig.cio_upstart = net_time(contig.cio_upstart, CURRENT);
                } else {
                    bzero(contig.cio_start, sizeof(nbsf::io_state_t) * NUM_LOG_BUFFERS);
                    contig.cio_upstart = 0;
                }
                
                neterize(contig.total, zero_state, contig.total);
                
                for (int i = 0; i < NUM_LOG_BUFFERS; ++i) {
                    LOGDEBUG(6, "\t\tstat(%i): filenr=%i servnr=%i nextw=%i\n",
                             i, contig.state[i].filenr, contig.state[i].servnr,
                             contig.state[i].nextw);
                    contig.state[i].filenr = htonl(contig.state[i].filenr);
                    contig.state[i].servnr = htonl(contig.state[i].servnr);
                    contig.state[i].nextw = htonl(contig.state[i].nextw);
                    
                    contig.size[i] = htonl(contig.size[i]);
                    contig.ratio[i] = htonl(contig.ratio[i]);
                }
                
                contig.sio_upstart = (contig.flags[nbsf::servio]) ? net_time(contig.sio_upstart, CURRENT) : 0;
                contig.cnc_upstart = (contig.flags[nbsf::control_connected]) ? net_time(contig.cnc_upstart, CURRENT) : 0;
                
                contig.main_upstart = net_time(contig.main_upstart, CURRENT);
                
                char cbuf[100];
                snprintf(cbuf, 100, "stats nbuffers=%i", NUM_LOG_BUFFERS);
             
             */